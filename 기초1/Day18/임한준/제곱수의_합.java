package 기초1.Day18.임한준;

import java.util.Scanner;

public class 제곱수의_합 {

    /**
     * 1699번
     * 어떤 자연수 N은 그보다 작거나 같은 제곱수들의 합으로 나타낼 수 있다. 예를 들어 11=32+12+12(3개 항)이다.
     * 이런 표현방법은 여러 가지가 될 수 있는데, 11의 경우 11=22+22+12+12+12(5개 항)도 가능하다.
     * 이 경우, 수학자 숌크라테스는 “11은 3개 항의 제곱수 합으로 표현할 수 있다.”라고 말한다.
     * 또한 11은 그보다 적은 항의 제곱수 합으로 표현할 수 없으므로, 11을 그 합으로써 표현할 수 있는 제곱수 항의 최소 개수는 3이다.
     * 주어진 자연수 N을 이렇게 제곱수들의 합으로 표현할 때에 그 항의 최소개수를 구하는 프로그램을 작성하시오.
     * <p>
     * 첫째 줄에 자연수 N이 주어진다. (1 ≤ N ≤ 100,000)
     */

    // dp
    // 제곱 수 그 자체가 n인 경우는 1로 최소
    // 아닐 경우 n이랑 (근접한 수의 제곱근)을 구해 다음 큰 제곱근을 조합해 나가는 형식
    // 잘못 생각했다.. n이랑 근접한 수의 제곱근으로 조합해 나가도 최소 항이 나올꺼란 보장이 없다..(틀림)
    // 1 ~ 11 까지의 수 중 제곱수인 수 + (11 - 제곱수) 의 최소 제곱수 갯수 중 최소인 값을 구해야 한다
    // (1,4,9)고 이들의 최소 제곱 수 또 한 1이면 (11-1),(11-4),(11-9) 에서 가장 작은 값과 +1 (이미 제곱수 썼으니)


    static int dp[] ;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        dp = new int[100001];



        // 1이 몇개 존재하는 지 최대 값으로 처음에 저장
        for(int i = 1; i <= n; i++) {
            dp[i] = i;
        }

        for(int i = 1; i <= n; i++) {

            // 최소가 되는 제곱수 = n의 이전 수 들 중 제곱수 + n - 제곱수의 최소항 개수
            // 반복문을 돌면서 i 제곱근 j의 수를 계산한다. 1,4,9 중 i 보다 작으면 dp[i]에 저장해 알아내는 방식
            for(int j = 1; j * j <= i; j++) {
                if(dp[i] > dp[i - (j * j)] + 1) {
                    dp[i] = dp[i - (j * j)] + 1;
                }
            }
        }

        System.out.println(dp[n]);
    }}

