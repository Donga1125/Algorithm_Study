package 기초1.Day20.임한준;

import java.util.Scanner;

public class 오르막수 {

    /** 11057번
     * 문제
     오르막 수는 수의 자리가 오름차순을 이루는 수를 말한다. 이때, 인접한 수가 같아도 오름차순으로 친다.
     예를 들어, 2234와 3678, 11119는 오르막 수이지만, 2232, 3676, 91111은 오르막 수가 아니다.
     수의 길이 N이 주어졌을 때, 오르막 수의 개수를 구하는 프로그램을 작성하시오. 수는 0으로 시작할 수 있다.

     * 입력
     첫째 줄에 N (1 ≤ N ≤ 1,000)이 주어진다.

     * 출력
     첫째 줄에 길이가 N인 오르막 수의 개수를 10,007로 나눈 나머지를 출력한다.
     */

    //길이만 주어지고, 남은 숫자 상관없이 0부터9개의 조합 중 하나씩 더해서 계산
    //[2][k] 00 01 02 03 04 ... 맨 뒷자리 수를 표현하면 오름차순으로 중복 안되게 계산 가능하다 즉
    // k는 2보다 작거나 같은 수만 올 수 있다
    //n이 총 숫자길이고, k는 주어진 뒷 수까지만 포함된다
    // DP[i][j] = DP[N - 1][0] + ... + DP[N - 1][j] -> DP[i][j] = DP[N][j - 1] + DP[N - 1][j]

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int[][] dp = new int[n + 1][10];

        for (int i = 0; i < 10; i++) {
            dp[0][i] = 1; // 기본 식 0일땐 무조건 하나의 경우 씩

    }
        for (int i = 1; i < n + 1; i++) {

            for (int j = 0; j < 10; j++) {

                for (int k = j; k < 10; k++) {
                    dp[i][j] += dp[i - 1][k];
                    dp[i][j] %= 10007;
                }
            }
        }
        System.out.println(dp[n][0]);
    }
}
